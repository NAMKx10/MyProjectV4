بالتأكيد. هذا طلب ممتاز جدًا، وتوثيق الرؤية الكاملة للمشروع هو أهم خطوة لضمان أننا وكل من يأتي بعدنا نسير على نفس الطريق.

لقد قمت بإعداد مستند شامل يجمع كل أفكارنا، ورحلتنا، والمبادئ التي اتفقنا عليها. هذا هو "دستور المشروع".

المستند المرجعي الشامل لمشروع "Namk" - الإصدار 4.0
1. اسم المشروع:

منصة "Namk" لإدارة الأعمال والأصول المتكاملة (The Namk Integrated Business & Asset Platform).

2. نبذة عن المشروع وفكرته النهائية (The Vision):

يهدف مشروع "Namk" إلى بناء منصة تطبيقات أعمال سحابية (PaaS)، ذكية ومترابطة، مصممة على أساس "البنية الشبكية". الفكرة النهائية هي تجاوز مفهوم أنظمة الإدارة التقليدية القائمة على الجداول المنفصلة، والوصول إلى نظام يعرض العلاقات بين البيانات كأولوية.

المنتج النهائي هو أشبه بـ "ويكيبيديا" أو "دماغ رقمي" خاص بأصول الشركة، حيث يمكن للمستخدم أن يتنقل بسلاسة من صفحة "مالك" إلى "عقاراته"، ومن "العقار" إلى "وثائقه وعقوده"، ومن "العقد" إلى "حركاته المالية"، في تجربة استخدام فريدة تركز على استكشاف المعلومات المترابطة بدلاً من البحث في قوائم صماء.

3. رحلة المشروع (كيف بدأنا وماذا فعلنا):

بدأ المشروع كتطبيق PHP منظم (Vanilla PHP). كانت هذه المرحلة بمثابة "مدرسة" رائعة تعلمنا فيها المبادئ الأساسية، حيث قمنا ببناء هيكلية نظيفة خاصة بنا، ودوال مركزية، وفصل للمسؤوليات. لقد نجحنا في بناء نظام وظيفي وقوي أثبت صحة منطق العمل وبنية قاعدة البيانات.

مع تطور الرؤية وزيادة تعقيد الأفكار (مثل الملكية المتعددة، والربط الذكي للوثائق، ونظام الحصص والتراخيص)، وصلنا إلى قناعة استراتيجية بأن الأدوات التي نبنيها بأنفسنا لم تعد كافية لمواكبة طموح المشروع.

لذلك، تم اتخاذ قرار استراتيجي بالانتقال إلى إطار العمل الاحترافي CodeIgniter 4. هذه لم تكن "بداية من الصفر"، بل كانت "قفزة تطويرية" نحو بيئة عمل أسرع وأكثر أمانًا وقابلية للتوسع، مع الاستفادة من كل الخبرة والمعرفة التي اكتسبناها في المرحلة الأولى.

4. أساسنا ومنهجنا (Our Core Principles):

نحن لا نكتب الكود فقط، بل نبني وفقًا لمجموعة من المبادئ الحاكمة التي تشكل "روح المشروع":

الهيكلية النظيفة أولاً (Clean Architecture First): نلتزم التزامًا صارمًا بنمط (MVC - Model, View, Controller). المتحكم يجهز البيانات، والموديل يتعامل مع قاعدة البيانات، والواجهة تعرض فقط. لا يوجد كود SQL في الواجهات، ولا يوجد HTML في المتحكمات.

لا تكرر نفسك (Don't Repeat Yourself - DRY): أي منطق أو كود يتكرر أكثر من مرة، يتم تحويله فورًا إلى "دالة مساعدة" (Helper) أو "مكتبة" (Library) مركزية يتم استدعاؤها، بدلاً من نسخ ولصق الكود. هذا يجعل الصيانة والتعديل مستقبلاً يتم في مكان واحد فقط.

قاعدة البيانات ككود (Database as Code): لا نقوم بإنشاء جداول قاعدة البيانات يدويًا. كل جدول، كل عمود، وكل علاقة يتم تعريفها بشكل واضح في ملفات "الهجرة" (Migrations). هذا يجعل بنية قاعدة البيانات جزءًا من المشروع، ويمكن إعادة إنشائها بالكامل وتنصيبها لأي عميل جديد بأمر واحد.

الأمان المدمج (Security by Design): نستغل كل أدوات الحماية التي يوفرها إطار العمل (الحماية من CSRF و XSS، والتعامل الآمن مع قاعدة البيانات عبر Query Builder) لضمان أن يكون النظام آمنًا بشكل افتراضي، وليس كفكرة ثانوية.

تجربة المستخدم كبوصلة: كل قرار تقني نتخذه يجب أن يصب في مصلحة جعل النظام أسهل وأسرع وأكثر إمتاعًا في الاستخدام. نحن نبني "أداة عمل" حقيقية، وليس مجرد واجهة لعرض البيانات.

5. التقنيات المعتمدة:

الواجهة الخلفية (Backend): PHP عبر إطار العمل CodeIgniter 4.

قاعدة البيانات: MySQL / MariaDB.

الواجهة الأمامية (Frontend): قالب Tabler (HTML, CSS)، مع استخدام مكتبات JavaScript عند الحاجة (مثل jQuery, Select2, SweetAlert2، ومكتبات الجداول التفاعلية مثل Handsontable).

هذا المستند يمثل الآن المرجع الرسمي الكامل للمشروع. يمكنك نسخه والاحتفاظ به.
